{"version":3,"sources":["jojobug.png","hooks/useQueryNews.tsx","Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","_fetch","Axios","request","method","baseURL","url","headers","Card","data","className","href","link","style","width","borderRadius","backgroundColor","overflow","boxShadow","backgroundImage","poster","backgroundRepeat","backgroundSize","alignItems","justifyContent","height","marginTop","judul","fontStyle","waktu","App","useQuery","isLoading","objectFit","objectPosition","src","require","alt","color","textShadow","map","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAAAA,EAAOC,QAAU,IAA0B,qC,kHCerCC,EAAS,WACb,OAAOC,IAAMC,QAAgB,CAC3BC,OAAQ,MACRC,QACE,+EACFC,IAAK,aACLC,QAAS,CACP,8BAA+B,Q,MCZtB,SAASC,EAAT,GAAgC,IAAhBC,EAAe,EAAfA,KAC7B,OACE,yBAAKC,UAAU,OACb,uBAAGC,KAAI,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAMG,MACb,yBACEF,UAAU,aACVG,MAAO,CACLC,MAAO,OACPC,aAAc,OACdC,gBAAiB,QACjBC,SAAU,SACVC,UAAW,gCAGb,yBACER,UAAU,SACVG,MAAO,CACLM,gBAAgB,OAAD,cAASV,QAAT,IAASA,OAAT,EAASA,EAAMW,OAAf,KACfC,iBAAkB,YAClBC,eAAgB,WAGpB,yBACEZ,UAAU,0BACVG,MAAO,CACLU,WAAY,SACZC,eAAgB,SAChBC,OAAQ,OACRT,gBAAiB,YAGnB,wBAAIN,UAAU,MAAMG,MAAO,CAAEa,UAAW,KAAxC,OACGjB,QADH,IACGA,OADH,EACGA,EAAMkB,OAET,uBAAGjB,UAAU,MAAMG,MAAO,CAAEe,UAAW,WAAvC,OACGnB,QADH,IACGA,OADH,EACGA,EAAMoB,WCDNC,MAtCf,WAAgB,IAAD,EFqBNC,YAAS,OAAQ9B,GEpBhBQ,EADK,EACLA,KAAMuB,EADD,EACCA,UACd,OACE,yBAAKtB,UAAU,OACb,yBACEA,UAAU,2BACVG,MAAO,CAAEC,MAAO,QAASW,OAAQ,OAAQT,gBAAiB,YAE1D,yBACEH,MAAO,CACLY,OAAQ,MACRQ,UAAW,UACXC,eAAgB,UAElBC,IAAKC,EAAQ,IACbC,IAAI,MAGR,4BAAQ3B,UAAU,sBAChB,wBACEG,MAAO,CACLa,UAAW,EACXY,MAAO,MACPC,WAAY,mBAJhB,oBASCP,EACC,wBAAItB,UAAU,OAAd,WADQ,OAGRD,QAHQ,IAGRA,OAHQ,EAGRA,EAAMA,KAAKA,KAAK+B,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAMhC,KAAMgC,UCzBhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.131922d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jojobug.0c2ef2c3.png\";","import Axios from \"axios\";\nimport { useQuery } from \"react-query\";\n\nexport type Result = {\n  data: Data[];\n  length: number;\n  status: string;\n};\nexport type Data = {\n  judul: string;\n  link: string;\n  poster: string;\n  tipe: string;\n  waktu: string;\n};\nconst _fetch = () => {\n  return Axios.request<Result>({\n    method: \"GET\",\n    baseURL:\n      \"https://cors-anywhere.herokuapp.com/http://www.news.developeridn.com/search/\",\n    url: \"?q=omnibus\",\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  });\n};\nexport default function useQueryNews() {\n  return useQuery(\"news\", _fetch);\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./Card.css\";\nimport useQueryNews, { Data } from \"./hooks/useQueryNews\";\nimport { url } from \"inspector\";\nimport { isString } from \"util\";\nimport { Link } from \"react-router-dom\";\ntype Props = {\n  data?: Data;\n};\nexport default function Card({ data }: Props) {\n  return (\n    <div className=\"mbs\">\n      <a href={data?.link}>\n        <div\n          className=\"responsive\"\n          style={{\n            width: \"80vw\",\n            borderRadius: \"15px\",\n            backgroundColor: \"white\",\n            overflow: \"hidden\",\n            boxShadow: \"4px 4px 5px rgba(0,0,0,0.5)\",\n          }}\n        >\n          <div\n            className=\"poster\"\n            style={{\n              backgroundImage: `url(${data?.poster})`,\n              backgroundRepeat: \"no-repeat\",\n              backgroundSize: \"cover\",\n            }}\n          ></div>\n          <div\n            className=\"content flex flexDirCol\"\n            style={{\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              height: \"100%\",\n              backgroundColor: \"#e4eff5\",\n            }}\n          >\n            <h2 className=\"mhl\" style={{ marginTop: 16 }}>\n              {data?.judul}\n            </h2>\n            <p className=\"mam\" style={{ fontStyle: \"italic\" }}>\n              {data?.waktu}\n            </p>\n          </div>\n        </div>\n      </a>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport useQueryNews from \"./hooks/useQueryNews\";\nimport Card from \"./Card\";\n\nfunction App() {\n  const { data, isLoading } = useQueryNews();\n  return (\n    <div className=\"App\">\n      <div\n        className=\"flex contentCenterCenter\"\n        style={{ width: \"100vw\", height: \"20vh\", backgroundColor: \"#343a40\" }}\n      >\n        <img\n          style={{\n            height: \"30%\",\n            objectFit: \"contain\",\n            objectPosition: \"center\",\n          }}\n          src={require(\"./jojobug.png\")}\n          alt=\"\"\n        />\n      </div>\n      <header className=\"App-header pvl pbl\">\n        <h1\n          style={{\n            marginTop: 0,\n            color: \"red\",\n            textShadow: \"white 3px 3px \",\n          }}\n        >\n          #TolakOmnibusLaw\n        </h1>\n        {isLoading ? (\n          <h2 className=\"mam\">Loading</h2>\n        ) : (\n          data?.data.data.map((item) => <Card data={item} />)\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}